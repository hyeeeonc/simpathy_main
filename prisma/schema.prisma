generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model attend {
  attend_id   Int      @id @default(autoincrement())
  user_id     String   @db.VarChar(50)
  attend_type Int
  attend_time DateTime @db.DateTime(0)
  branch_id   Int
  branch      branch   @relation(fields: [branch_id], references: [branch_id], onUpdate: Restrict, map: "FK_attend_branch_id_branch_branch_id")
  user        user     @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK_attend_user_id_user_user_id")

  @@index([branch_id], map: "FK_attend_branch_id_branch_branch_id")
  @@index([user_id], map: "FK_attend_user_id_user_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model board {
  board_id         Int      @id @default(autoincrement())
  board_name       String   @db.VarChar(50)
  board_read_auth  Int
  board_write_auth Int
  category_id      Int
  board_order      Int
  category         category @relation(fields: [category_id], references: [category_id], onUpdate: Restrict, map: "FK_board_category_id_category_category_id")
  post             post[]

  @@index([category_id], map: "FK_board_category_id_category_category_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model branch {
  branch_id               Int          @id @default(autoincrement())
  branch_name             String       @db.VarChar(50)
  branch_textbook         String?      @db.VarChar(50)
  branch_textbook_total   Int?
  branch_textbook_now     Int?
  branch_textbook_preview Int?
  branch_text_now         String?      @db.VarChar(50)
  branch_text_preview     String?      @db.VarChar(50)
  attend                  attend[]
  branchpost              branchpost[]
  consulting              consulting[]
  user                    user[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
  category_id    Int     @id @default(autoincrement())
  category_name  String  @db.VarChar(50)
  category_order Int
  board          board[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model consulting {
  consulting_id         Int       @id @default(autoincrement())
  user_id               String    @db.VarChar(50)
  branch_id             Int
  consulting_tag        String    @db.VarChar(500)
  consulting_content    String    @db.Text
  consulting_detail     String    @db.Text
  consulting_checked    Int
  consulting_phone      String    @db.VarChar(50)
  consulting_consultant String    @db.VarChar(50)
  consulting_wishdate   String    @db.VarChar(50)
  consulting_time       DateTime? @db.DateTime(0)
  branch                branch    @relation(fields: [branch_id], references: [branch_id], onUpdate: Restrict, map: "FK_consulting_branch_id_branch_branch_id")
  user                  user      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK_consulting_user_id_user_user_id")

  @@index([branch_id], map: "FK_consulting_branch_id_branch_branch_id")
  @@index([user_id], map: "FK_consulting_user_id_user_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model file {
  file_id   Int    @id @default(autoincrement())
  post_id   Int?
  file_name String @db.VarChar(100)
  file_addr String @db.VarChar(1000)
  post      post?  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_file_post_id__post_post_id")

  @@index([post_id], map: "FK_file_post_id__post_post_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model grade {
  grade_id   Int    @id
  grade_name String @db.VarChar(50)
  user       user[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reply {
  reply_id          Int       @id @default(autoincrement())
  user_id           String?   @db.VarChar(50)
  post_id           Int?
  reply_content     String?   @db.Text
  reply_upload_time DateTime? @db.DateTime(0)
  origin_id         Int?
  post              post?     @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_reply_post_id_post_post_id")
  user              user?     @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "FK_reply_user_id_user_user_id")
  reply             reply?    @relation("replyToreply", fields: [origin_id], references: [reply_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_origin_reply")
  other_reply       reply[]   @relation("replyToreply")

  @@index([user_id], map: "FK_reply_user_id_user_user_id")
  @@index([origin_id], map: "fk_origin_reply")
  @@index([post_id], map: "FK_reply_post_id_post_post_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  user_id           String       @id @db.VarChar(50)
  user_pw           String       @db.VarChar(100)
  user_name         String       @db.VarChar(50)
  user_phone        String?      @db.VarChar(50)
  user_parent_phone String?      @db.VarChar(50)
  grade_id          Int
  branch_id         Int
  attend            attend[]
  branchpost        branchpost[]
  consulting        consulting[]
  post              post[]
  reply             reply[]
  branch            branch       @relation(fields: [branch_id], references: [branch_id], onUpdate: Restrict, map: "FK_user_branch_id_branch_branch_id")
  grade             grade        @relation(fields: [grade_id], references: [grade_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_grade_id_grade_grade_id")

  @@index([branch_id], map: "FK_user_branch_id_branch_branch_id")
  @@index([grade_id], map: "FK_user_grade_id_grade_grade_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post {
  post_id          Int       @id @default(autoincrement())
  board_id         Int
  user_id          String    @db.VarChar(50)
  post_title       String    @db.VarChar(100)
  post_contents    String    @db.Text
  post_upload_time DateTime  @db.DateTime(0)
  post_update_time DateTime? @db.DateTime(0)
  isNotice         Boolean?  @default(false)
  file             file[]
  board            board     @relation(fields: [board_id], references: [board_id], onUpdate: Restrict, map: "FK_post_board_id_board_board_id")
  user             user      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK_post_user_id_user_user_id")
  reply            reply[]

  @@index([board_id], map: "FK_post_board_id_board_board_id")
  @@index([user_id], map: "FK_post_user_id_user_user_id")
}

model branchfile {
  file_id    Int        @id @default(autoincrement())
  post_id    Int
  file_name  String     @db.VarChar(100)
  file_addr  String     @db.VarChar(1000)
  branchpost branchpost @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "branchfile_ibfk_1")

  @@index([post_id], map: "post_id")
}

model branchpost {
  post_id          Int          @id @default(autoincrement())
  branch_id        Int
  user_id          String       @db.VarChar(50)
  post_title       String       @db.VarChar(100)
  post_contents    String       @db.Text
  post_upload_time DateTime     @db.DateTime(0)
  post_update_time DateTime?    @db.DateTime(0)
  branchfile       branchfile[]
  branch           branch       @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade, onUpdate: NoAction, map: "branchpost_ibfk_1")
  user             user         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "branchpost_ibfk_2")

  @@index([branch_id], map: "branch_id")
  @@index([user_id], map: "user_id")
}
